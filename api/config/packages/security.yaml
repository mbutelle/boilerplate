security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        doc_user:
            memory:
                users:
                    doc_user: { password: '%env(DOC_PASSWORD)%', roles: ['ROLE_DOC']} # test TODO modifier le mdp de ce user

        app_user_provider:
            entity:
                class: App\Security\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/_(profiler|wdt)/
            security: false

        doc:
            pattern: ^/$
            security: true
            provider: doc_user
            http_basic:
                realm: Secured Area

        main:
            stateless: true
            security: true
            provider: app_user_provider
            json_login:
                check_path: /auth # The name in routes.yaml is enough for mapping
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/$, roles: ROLE_DOC }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
